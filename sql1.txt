-- The main query remains mostly the same as before
SELECT
    c.id AS company_id,
    c.name AS company_name,
    GROUP_CONCAT(DISTINCT CASE WHEN u.Is_owner = 1 THEN u.email END SEPARATOR ', ') AS company_owners_emails,
    100 * (1 - mv.visits_last_30_days / av.avg_visits_prev_3_months) AS avg_percentage_drop,
    av.avg_visits_prev_3_months AS average_visits_prev_3_months,
    mv.visits_last_30_days AS visits_last_30_days,
    CASE WHEN 100 * (1 - mv.visits_last_30_days / av.avg_visits_prev_3_months) > 50 THEN 1 ELSE 0 END AS is_churn_risk
FROM
    companies c
JOIN
    users u ON c.id = u.company_id
LEFT JOIN (
    SELECT
        u.company_id,
        COUNT(DISTINCT v.id) AS visits_last_30_days
    FROM
        users u
    JOIN
        visits v ON u.id = v.user_id
    WHERE
        v.created_at >= NOW() - INTERVAL 30 DAY
    GROUP BY
        u.company_id
) mv ON c.id = mv.company_id
LEFT JOIN (
    SELECT
        m1.company_id,
        m1.visits_1_month_ago / 3.0 + COALESCE(m2.visits_2_months_ago, 0) / 3.0 AS avg_visits_prev_3_months
    FROM (
        SELECT
            u.company_id,
            COUNT(DISTINCT v.id) AS visits_1_month_ago
        FROM
            users u
        JOIN
            visits v ON u.id = v.user_id
        WHERE
            v.created_at BETWEEN NOW() - INTERVAL 2 MONTH AND NOW() - INTERVAL 1 MONTH
        GROUP BY
            u.company_id
    ) m1
    LEFT JOIN (
        SELECT
            u.company_id,
            COUNT(DISTINCT v.id) AS visits_2_months_ago
        FROM
            users u
        JOIN
            visits v ON u.id = v.user_id
        WHERE
            v.created_at BETWEEN NOW() - INTERVAL 3 MONTH AND NOW() - INTERVAL 2 MONTH
        GROUP BY
            u.company_id
    ) m2 ON m1.company_id = m2.company_id
) av ON c.id = av.company_id
GROUP BY
    c.id, c.name, av.avg_visits_prev_3_months, mv.visits_last_30_days;
